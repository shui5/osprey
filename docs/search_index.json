[["index.html", "Osprey Contact, Feedback, Suggestions Developers Acknowledgements", " Osprey Osprey is an all-in-one software suite for state-of-the art processing and quantitative analysis of in-vivo magnetic resonance spectroscopy (MRS) data. Contact, Feedback, Suggestions For any sort of questions, feedback, suggestions, or critique, please visit the Osprey support forum on the MRSHub. We also welcome your direct contributions to Osprey in the Osprey GitHub repository. Developers Georg Oeltzschner Helge J. Zöllner Richard A. E. Edden Should you publish material that made use of Osprey, please cite the following publication: G Oeltzschner, HJ Zöllner, SCN Hui, M Mikkelsen, MG Saleh, S Tapper, RAE Edden. Osprey: Open-Source Processing, Reconstruction &amp; Estimation of Magnetic Resonance Spectroscopy Data. J Neurosci Meth 343:108827 (2020). Acknowledgements This work has been supported by NIH grants R01EB016089, P41EB15909, R01EB023963, and K99AG062230. We wish to thank the following individuals for their contributions to the development of Osprey and shared processing code: Jamie Near (McGill University, Montreal) Ralph Noeske (GE Healthcare, Berlin) Peter Barker (Johns Hopkins University, Baltimore) Robin de Graaf (Yale School of Medicine, New Haven) Philipp Ehses (German Center for Neurodegenerative Diseases, Bonn) Wouter Potters (UMC Amsterdam) Xiangrui Li (Ohio State University, Columbus) We are particularly grateful for the incredible raincloud plot tools developed by Micah Allen, Davide Poggiali, Kirstie Whitaker, Tom Rhys Marshall, and Rogier Kievit. Should you make use of the OspreyOverview raincloud plots, please consider citing their original publications: Allen M, Poggiali D, Whitaker K et al. Raincloud plots: a multi-platform tool for robust data visualization [version 1; peer review: 2 approved]. Wellcome Open Res 2019, 4:63. DOI: 10.12688/wellcomeopenres.15191.1 Allen M, Poggiali D, Whitaker K, Marshall TR, Kievit R. (2018) RainCloudPlots tutorials and codebase (Version v1.1). Zenodo. http://doi.org/10.5281/zenodo.3368186 "],["getting-started.html", "Chapter 1 Getting started 1.1 System requirements 1.2 Installing Osprey 1.3 How to organize your raw data", " Chapter 1 Getting started 1.1 System requirements Osprey requires MATLAB and has been tested on version 2017a and newer. The following toolboxes are required for full functionality: Optimization Statistics and Machine Learning You may need to ask your system administrator for a separate license for missing toolboxes. You can check your current MATLAB version and the available toolboxes with the following command at the MATLAB prompt: &gt;&gt; ver ----------------------------------------------------------------------------------------------------- MATLAB Version: 9.4.0.949201 (R2018a) Update 6 MATLAB License Number: 703789 Operating System: Mac OS X Version: 10.14.6 Build: 18G4032 Java Version: Java 1.8.0_144-b01 with Oracle Corporation Java HotSpot(TM) 64-Bit Server VM mixed mode ----------------------------------------------------------------------------------------------------- MATLAB Version 9.4 (R2018a) Curve Fitting Toolbox Version 3.5.7 (R2018a) GUI Layout Toolbox Version 2.3.4 (R2018b) Global Optimization Toolbox Version 3.4.4 (R2018a) Image Processing Toolbox Version 10.2 (R2018a) Neural Network Toolbox Version 11.1 (R2018a) Optimization Toolbox Version 8.1 (R2018a) Parallel Computing Toolbox Version 6.12 (R2018a) Signal Processing Toolbox Version 8.0 (R2018a) Statistics and Machine Learning Toolbox Version 11.3 (R2018a) Symbolic Math Toolbox Version 8.1 (R2018a) Wavelet Toolbox Version 5.0 (R2018a) Widgets Toolbox Version 1.3.330 (R2019a) The available toolboxes (including SPM) are checked at the initial call of the Osprey GUI, and missing toolboxes are reported back to the user. 1.2 Installing Osprey Get the latest Osprey code from our GitHub repository: Clone the repository, or download and extract the contents of the .ZIP file to a directory on your drive. Figure 1.1: Cloning Osprey from GitHub. Add the entire osprey directory (with subfolders) to your MATLAB path. Make sure to regularly check the repository for updates, as we frequently commit new features, bug fixes, and improved functions. To perform voxel co-registration and tissue segmentation, download SPM12 from the University College London website. You will need to provide the SPM team with some information before you can access the download link. Extract the downloaded archive so that the spm12 folder is on the same directory level as the osprey folder: Figure 1.2: Make sure that the SPM12 and Osprey folders are in the same directory. Add the spm12 folder to your MATLAB path, but without subfolders - during testing, we have found that adding SPM subfolders to the MATLAB path can cause functions to fail. If you want to use the Osprey Graphical User Interface (GUI), please download the following toolboxes from the MATLAB File Exchange: GUI Layout Toolbox (David Sampson) Widget Toolbox (Robin Jackey) Download both toolboxes in the MATLAB toolbox format (.mltbx). You can double-click to install. MATLAB will automatically add the toolboxes to its path. 1.3 How to organize your raw data Raw MRS data come in an overwhelming variety of formats, each producing different numbers of files. Osprey does not make a lot of assumptions with regard to your folder structure, since you specify the exact location for each file in a job file prior to each analysis. It is highly recommended, however, that you store different acquisitions in separate folders. Organizing your raw data in a consistent and meaningful way will save you a lot of time and nerves. To ensure optimal functioning of Osprey, we suggest adapting the folder hierarchy proposed by the BIDS (Brain Imaging Data Structure) initiative: There are four main levels of the folder hierarchy, these are: project/ └── subject └── session └── acquisition With the exception of the top-level project folder, all sub-folders have a specific structure to their name (described below). Here’s an example of how this hierarchy looks: myProject/ └── sub-01 └── ses-01 └── anat An example adaptation of this hierarchy for Philips MRS data could look like this: myProject/ ├── sub-01 │ └── ses-01 │ ├── anat │ │ └── sub-01_T1w.nii │ └── mrs │ ├── sub-01_mega-press_act │ │ ├── sub-01_mega-press_act.sdat │ │ └── sub-01_mega-press_act.spar │ ├── sub-01_mega-press_ref │ │ ├── sub-01_mega-press_ref.sdat │ │ └── sub-01_mega-press_ref.spar │ └── sub-01_press-water │ ├── sub-01_press-water_act.sdat │ └── sub-01_press-water_act.spar ├── sub-02 │ └── ses-01 │ ├── anat │ │ └── sub-02_T1w.nii │ └── mrs │ ├── sub-02_mega-press_act │ │ ├── sub-02_mega-press_act.sdat │ │ └── sub-02_mega-press_act.spar │ ├── sub-02_mega-press_ref │ │ ├── sub-02_mega-press_ref.sdat │ │ └── sub-02_mega-press_ref.spar │ └── sub-02_press-water │ ├── sub-02_press-water_act.sdat │ └── sub-02_press-water_act.spar ... ... While adhering to the BIDS standard is a recommendation, it is by no means binding for most file formats. You can, for example, keep Siemens TWIX files (.dat) all in the same folder, and Osprey will be able to handle them, if you define their paths in the job file accordingly. There is one exception: For data stored in single-average DICOM (*.IMA, *.DCM) or single-average Siemens RDA format, it is absolutely necessary to keep every scan in a separate folder. "],["the-osprey-workflow.html", "Chapter 2 The Osprey Workflow", " Chapter 2 The Osprey Workflow Osprey was designed to have an easy, linear workflow with as little user input as possible. It has many built-in routines to recognize data formats and sequence types, and will be able to perform most required processing steps automatically. Osprey consists of seven separate modules – Job, Load, Proc, Fit, Coreg, Seg, and Quant, all of which are sequentially called in a graphical user interface. Alternatively, users can conduct the entire workflow from the MATLAB command prompt. Figure 2.1: The Osprey workflow. Some input will need to be provided by the user in the form of a job. A job specifies the locations of the files containing MRS and structural imaging data, the type of MRS sequence, and some basic control options over the data modeling procedure. While a job is progressing through the Osprey pipeline, all raw and processed data associated with this job are stored in a MATLAB structure, the Osprey data container. By default, this container is called MRSCont, but you are free to give it a more meaningful variable name. Osprey’s data handling is based in large parts on the free MATLAB toolbox FID-A. The Osprey folder contains a library of, sometimes modified, FID-A functions and additions. Please make sure that you do not include an installation of the original FID-A suite in your MATLAB path, as some functions in the Osprey folder might be shadowed by FID-A functions with the same name. The MRSCont data container functions as a super-structure, containing FID-A structures for each dataset and processing step, along with additional information, e.g. quality metrics, quantification results, etc. "],["the-osprey-job-file.html", "Chapter 3 The Osprey job file 3.1 Example job file", " Chapter 3 The Osprey job file Every Osprey analysis requires the user to provide a job file. The Osprey job file is the only direct point of contact between the user and the analysis. It contains paths to MRS data files and structural images, defines processing and modelling options, and determines whether (and where) output files are being saved. The job file system ensures that all processing, modeling, and quantification steps are performed in an operator-independent, reproducible way. 3.1 Example job file The following collapsible box contains the example job file jobSDAT.m defining a batched analysis of the two Philips PRESS (TE = 30 ms) datasets that are included in the exampledata/sdat/ directory of the Osprey repository. You can click on the dropdown arrow on the right to take a look through the file, and then read on for a detailed description of each job file item. Example job file jobSDAT.m: %% jobSDAT.m % This function describes an Osprey job defined in a MATLAB script. % % A valid Osprey job contains four distinct classes of items: % 1. basic information on the MRS sequence used % 2. several settings for data handling and modeling % 3. a list of MRS (and, optionally, structural imaging) data files % to be loaded % 4. an output folder to store the results and exported files % % The list of MRS and structural imaging files is provided in the form of % cell arrays. They can simply be provided explicitly, or from a more % complex script that automatically determines file names from a given % folder structure. % % Osprey distinguishes between four sets of data: % - metabolite (water-suppressed) data % (MANDATORY) % Defined in cell array &quot;files&quot; % - water reference data acquired with the SAME sequence as the % metabolite data, just without water suppression RF pulses. This % data is used to determine complex coil combination % coefficients, and perform eddy current correction. % (OPTIONAL) % Defined in cell array &quot;files_ref&quot; % - additional water data used for water-scaled quantification, % usually from short-TE acquisitions due to reduced T2-weighting % (OPTIONAL) % Defined in cell array &quot;files_w&quot; % - Structural image data used for co-registration and tissue class % segmentation (usually a T1 MPRAGE). These files need to be % provided in the NIfTI format (*.nii) or, for GE data, as a % folder containing DICOM Files (*.dcm). % (OPTIONAL) % Defined in cell array &quot;files_nii&quot; % % Files in the formats % - .7 (GE) % - .SDAT, .DATA/.LIST, .RAW/.SIN/.LAB (Philips) % - .DAT (Siemens) % usually contain all of the acquired data in a single file per scan. GE % systems store water reference data in the same .7 file, so there is no % need to specify it separately under files_ref. % % Files in the formats % - .DCM (any) % - .IMA, .RDA (Siemens) % may contain separate files for each average. Instead of providing % individual file names, please specify folders. Metabolite data, water % reference data, and water data need to be located in separate folders. % % In the example script at hand the MATLAB functions strrep and which are % used to generate a relative path, which allows you to run the examples % on your machine directly. To set up your own Osprey job supply the % specific locations as described above. % % AUTHOR: % Dr. Georg Oeltzschner (Johns Hopkins University, 2019-07-15) % goeltzs1@jhmi.edu % % HISTORY: % 2019-07-15: First version of the code. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% 1. SPECIFY SEQUENCE INFORMATION %%% % Specify sequence type seqType = &#39;unedited&#39;; % OPTIONS: - &#39;unedited&#39; (default) % - &#39;MEGA&#39; % - &#39;HERMES&#39; % - &#39;HERCULES&#39; % Specify editing targets editTarget = {&#39;none&#39;}; % OPTIONS: - {&#39;none&#39;} (default if &#39;unedited&#39;) % - {&#39;GABA&#39;}, {&#39;GSH&#39;} (for &#39;MEGA&#39;) % - {&#39;GABA, &#39;GSH}, {&#39;GABA, GSH, EtOH&#39;} (for &#39;HERMES&#39;) % - {&#39;HERCULES1&#39;}, {&#39;HERCULES2&#39;} (for &#39;HERCULES&#39;) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% 2. SPECIFY DATA HANDLING AND MODELING OPTIONS %%% % Save LCModel-exportable files for each spectrum? opts.saveLCM = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) % Save jMRUI-exportable files for each spectrum? opts.saveJMRUI = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) % Save processed spectra in vendor-specific format (SDAT/SPAR, RDA, P)? opts.saveVendor = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) % Choose the fitting algorithm opts.fit.method = &#39;Osprey&#39;; % OPTIONS: - &#39;Osprey&#39; (default) % - &#39;AQSES&#39; (planned) % - &#39;TARQUIN&#39; (planned) % Choose the fitting style for difference-edited datasets (MEGA, HERMES, HERCULES) % (only available for the Osprey fitting method) opts.fit.style = &#39;Concatenated&#39;; % OPTIONS: - &#39;Concatenated&#39; (default) - will fit DIFF and SUM simultaneously) % - &#39;Separate&#39; - will fit DIFF and OFF separately % Determine fitting range (in ppm) for the metabolite and water spectra opts.fit.range = [0.2 4.2]; % [ppm] Default: [0.2 4.2] opts.fit.rangeWater = [2.0 7.4]; % [ppm] Default: [2.0 7.4] % Determine the baseline knot spacing (in ppm) for the metabolite spectra opts.fit.bLineKnotSpace = 0.4; % [ppm] Default: 0.4. % Add macromolecule and lipid basis functions to the fit? opts.fit.fitMM = 1; % OPTIONS: - 0 (no) % - 1 (yes, default) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% 3. SPECIFY MRS DATA AND STRUCTURAL IMAGING FILES %% % When using single-average Siemens RDA or DICOM files, specify their % folders instead of single files! % Specify metabolite data % (MANDATORY) files = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press/sub-01_PRESS_35_act.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press/sub-02_PRESS_35_act.sdat&#39;)}; % Specify water reference data for eddy-current correction (same sequence as metabolite data!) % (OPTIONAL) % Leave empty for GE P-files (.7) - these include water reference data by % default. files_ref = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press-ref/sub-01_PRESS_35_ref.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press-ref/sub-02_PRESS_35_ref.sdat&#39;)}; % Specify water data for quantification (e.g. short-TE water scan) % (OPTIONAL) files_w = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press-ref/sub-01_PRESS_35_ref.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press-ref/sub-02_PRESS_35_ref.sdat&#39;)}; % Specify T1-weighted structural imaging data % (OPTIONAL) % Link to single NIfTI (*.nii) files for Siemens and Philips data % Link to DICOM (*.dcm) folders for GE data files_nii = {which(&#39;exampledata/sdat/sub-01/anat/sub-01_T1w.nii&#39;),... which(&#39;exampledata/sdat/sub-02/anat/sub-02_T1w.nii&#39;)}; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% 4. SPECIFY OUTPUT FOLDER %% % The Osprey data container will be saved as a *.mat file in the output % folder that you specify below. In addition, any exported files (for use % with jMRUI, TARQUIN, or LCModel) will be saved in sub-folders. % Specify output folder % (MANDATORY) outputFolder = strrep(which(&#39;exampledata/sdat/jobSDAT.m&#39;),&#39;jobSDAT.m&#39;,&#39;derivatives&#39;); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3.1.1 Sequence Information In this section of the job file, you determine basic information on the type of sequence you used. 3.1.1.1 Sequence Type The seqType variable is a describes the sequence type, and is a required input in the form of a string. seqType determines whether the supplied datasets have been acquired with spectral editing experiments. % Specify sequence type seqType = &#39;unedited&#39;; % OPTIONS: - &#39;unedited&#39; (default) % - &#39;MEGA&#39; % - &#39;HERMES&#39; % - &#39;HERCULES&#39; 3.1.1.2 Editing Targets The editTarget variable describes the sequence type, and is a required input in the form of a cell array. editTarget determines the target spin system(s) of spectral editing experiments. If no spectral editing has been performed, enter {'none'}. % Specify editing targets editTarget = {&#39;none&#39;}; % OPTIONS: - {&#39;none&#39;} (default if &#39;unedited&#39;) % - {&#39;GABA&#39;}, {&#39;GSH&#39;} (for &#39;MEGA&#39;) % - {&#39;GABA, &#39;GSH}, {&#39;GABA, GSH, EtOH&#39;} (for &#39;HERMES&#39;) % - {&#39;HERCULES1&#39;}, {&#39;HERCULES2&#39;} (for &#39;HERCULES&#39;) 3.1.2 Data handling and modeling options In this section of the job file, you provide information on whether you would like to save the processed data in externally usable file formats (for example, if you want to interface your analysis with LCModel), and specify options for the modelling. 3.1.2.1 Saving data to external formats The opts.save variable set determines whether Osprey saves the processed data in formats that can be interfaced with external analysis software. By setting opts.saveLCM to 1, LCModel-readable .RAW files are produced. By setting opts.saveJMRUI to 1, jMRUI/Tarquin-readable .TXT files are produced. By setting opts.saveVendor to 1, single vendor-specific files are created, i.e. .SDAT/.SPAR files for Philips data, and .RDA files for Siemens data, regardless of the raw data format. % Save LCModel-exportable files for each spectrum? opts.saveLCM = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) % Save jMRUI-exportable files for each spectrum? opts.saveJMRUI = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) % Save processed spectra in vendor-specific format (SDAT/SPAR, RDA, P)? opts.saveVendor = 1; % OPTIONS: - 0 (no, default) % - 1 (yes) LCModel .RAW files can be loaded via the Other option in the LCModel file type selection menu. Please be aware that LCModel may prompt you to enter the number of FID data points (a positive integer number, e.g. 2048), dwell time (in seconds, e.g. 0.0005), and the static magnetic field strength in MHz (e.g. 123.26 for a Siemens 2.89 T magnet). In addition to the .RAW files, Osprey also creates the corresponding .CONTROL files. These files can be used for LCModel batch processing. for file in /storage/LCModelControlFiles/*; do /usr/local/.lcmodel/bin/lcmodel &lt; $file; done To create working .CONTROL files you have to specify the following mandatory variables in the osp_lcmcontrol_params() function located in the process folder: key, FILBAS, FOLDER, and DOECC. key = 0; %Your LCM key goes here FILBAS = &#39;/storage/myBasisSet_30ms_PRESS.BASIS&#39;; % Location of .BASIS file used in LCModel FOLDER = &#39;/storage/LCMoutput&#39;; %Output folder (Create this on your linux machine first) DOECC= &#39;F&#39;; % No eddy current correction in LCModel as this is already performed in Osprey. The other parameters are optional and are described in the osp_lcmcontrol_params() function. When loading .TXT files with Tarquin, you will probably need to enter the echo time in seconds (e.g. 0.03 for a TE = 30 ms acquisition). The opts.saveVendor switch has been introduced to sidestep these problems with .RAW and .TXT files. LCModel, TARQUIN and jMRUI accept the .SDAT/.SPAR and .RDA file formats, and should be able to read the header information correctly. All exported third-party format files are stored in sub-directories of the output folder specified further down in the job file. 3.1.2.2 Specifying fitting options The opts.fit.method variable set determines the modelling algorithm used to fit the processed spectra. Currently, the only available option is the default Osprey model. We are planning to implement other algorithms in the future. % Choose the fitting algorithm opts.fit.method = &#39;Osprey&#39;; % OPTIONS: - &#39;Osprey&#39; (default) % - &#39;AQSES&#39; (planned) % - &#39;TARQUIN&#39; (planned) The opts.fit.style variable set determines how difference-edited data are modeled. By setting opts.fit.style to Concatenated, the difference and sum spectra in MEGA, HERMES and HERCULES datasets will be modeled simultaneously, i.e. with common metabolite amplitude parameters across these spectra. By setting opts.fit.style to Separate, the difference and edit-OFF spectra in MEGA, HERMES and HERCULES datasets will be modeled independently. In this case, the creatine reference signal will be determined from the edit-OFF spectrum. % Choose the fitting style for difference-edited datasets (MEGA, HERMES, HERCULES) % (only available for the Osprey fitting method) opts.fit.style = &#39;Concatenated&#39;; % OPTIONS: - &#39;Concatenated&#39; (default) - will fit DIFF and SUM simultaneously) % - &#39;Separate&#39; - will fit DIFF and OFF separately The opts.fit.range and opts.fit.rangeWater variables determine the fitting range (in ppm) of the metabolite and water spectra, respectively. % Determine fitting range (in ppm) for the metabolite and water spectra opts.fit.range = [0.2 4.2]; % [ppm] Default: [0.2 4.2] opts.fit.rangeWater = [2.0 7.4]; % [ppm] Default: [2.0 7.4] The opts.fit.bLineKnotSpace variable determines the spacing (in ppm) between two adjacent knots of the cubic B-spline baseline. This parameter is equivalent to the DKNTMN parameter in LCModel. Higher values correspond to a stiffer baseline, while lower values will produce a larger number of spline knots, allowing for greater flexibility of the baseline. % Determine the baseline knot spacing (in ppm) for the metabolite spectra opts.fit.bLineKnotSpace = 0.4; % [ppm] Default: 0.4. Choosing lower values for the bLineKnotSpace variable will improve the fit quality at the expense of overparametrization of the model. LCModel uses a default knot spacing of DKNTMN = 0.15, i.e. 0.15 ppm, which likely allows too much flexibility. In the absence of baseline regularization in the current stage of the Osprey model development, we chose to restrict baseline flexibility by opting for a default value of 0.4 ppm. The opts.fit.fitMM variable determines whether simulated Gaussian signals representing broad macromolecular and lipid signals are included in the basis set. By default, Osprey includes these basis functions. If you want to use an experimentally measured MM/lipid basis function, or operate at long echo times where the MM and lipid resonances have decayed, you can set opts.fit.fitMM = 0 to exclude them. % Add macromolecule and lipid basis functions to the fit? opts.fit.fitMM = 1; % OPTIONS: - 0 (no) % - 1 (yes, default) 3.1.3 Specifying MRS data and structural imaging files In this section of the job file, you specify the full paths to the MRS data and structural imaging files that you would like to process and analyze. Osprey is designed for the batch analysis of multiple datasets in one session. Each dataset corresponds to an element of a cell array. The cell arrays for metabolite data, water reference data, short-TE water data, and structural imaging files need to have the same number of elements. For example, if you have MRS data from two voxels in the same subject, you need to enter the path to the .NII structural twice into the files_nii cell array. At the current stage of implementation, you can only analyze one type of sequence per job file, i.e. if you have MEGA-PRESS and PRESS data for each subject, you will have to design two separate job files for MEGA-PRESS and PRESS data. 3.1.3.1 Metabolite data The files variable is defined as a cell array of full paths to the raw MRS data files containing your metabolite (water-suppressed) data. % Specify metabolite data % (MANDATORY) files = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press/sub-01_PRESS_35_act.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press/sub-02_PRESS_35_act.sdat&#39;)}; In the job files in the exampledata folder of the Osprey repository, the which function ensures that the paths are correctly defined regardless of where you put your Osprey folder. When designing your own job file, you will have to provide the full paths to your raw data, e.g.: % Specify metabolite data % (MANDATORY) files = {&#39;/Users/Georg/Documents/MRSData/study-01/sub-01/mrs/sub-01_press/sub-01_PRESS_35_act.sdat&#39;,... &#39;/Users/Georg/Documents/MRSData/study-01/sub-02/mrs/sub-02_press/sub-02_PRESS_35_act.sdat&#39;,}; Instead of writing out the full paths explicitly, you can also create a procedure that is tailored to your local file organization, as long as you end up with a files cell array containing an element for each file you want to analyze. MRS raw data can be exported in DICOM and Siemens RDA format, where each average is saved as a separate .DCM or .RDA file. In this case, you have to enter the full path to the folder containing all single-average files belong to one acquisition. Please refer to the [data organization chapter][how-to-organize-your-raw-data] of this documentation for best practices on creating a useful folder structure for your raw data. 3.1.3.2 Lineshape reference data The files_ref variable is defined as a cell array of full paths to the raw MRS data files to your lineshape (water-unsuppressed) reference data. These are an optional input, acquired with the same sequence as the metabolite data, but without water suppression, and used to perform eddy-current correction of the metabolite data. % Specify water reference data for eddy-current correction (same sequence as metabolite data!) % (OPTIONAL) % Leave empty for GE P-files (.7) - these include water reference data by % default. files_ref = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press-ref/sub-01_PRESS_35_ref.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press-ref/sub-02_PRESS_35_ref.sdat&#39;)}; If only lineshape reference data are provided, this signal is also used to calculate water-scaled concentration estimates. 3.1.3.3 Short-TE water data The files_w variable is defined as a cell array of full paths to the raw MRS data files to short-TE water data. These are another optional input, and can be used to derive water-scaled concentration estimates (while lineshape reference data are only used for eddy-current correction). Using short-TE water as the concentration reference standard reduces T2-weighting of the water reference signal (and associated correction errors) compared to long-TE water data. % Specify water data for quantification (e.g. short-TE water scan) % (OPTIONAL) files_w = {which(&#39;exampledata/sdat/sub-01/mrs/sub-01_press-ref/sub-01_PRESS_35_ref.sdat&#39;),... which(&#39;exampledata/sdat/sub-02/mrs/sub-02_press-ref/sub-02_PRESS_35_ref.sdat&#39;)}; 3.1.3.4 Structural images The files_nii variable is defined as a cell array of full paths to T1-weighted structural images used for co-registration and segmentation purposes. Osprey requires NIfTI (.nii) files to be supplied. For GE files, you may also provide the full path to a directory containing the DICOM folders corresponding to the T1 acquisition. % Specify T1-weighted structural imaging data % (OPTIONAL) % Link to single NIfTI (.nii) files for Siemens and Philips data % Link to DICOM (.dcm) folders for GE data files_nii = {which(&#39;exampledata/sdat/sub-01/anat/sub-01_T1w.nii&#39;),... which(&#39;exampledata/sdat/sub-02/anat/sub-02_T1w.nii&#39;)}; Osprey uses SPM12 functions to load and process structural images. Please refer to the installation instructions for information on how to set up SPM12. 3.1.4 4. Specifying the output folder In this section of the job file, you specify the full paths to an output folder where the Osprey data container is saved in .mat format. In addition, any exported files (for use with jMRUI, TARQUIN, or LCModel) will be saved in separate sub-folders of the output folder. The outputFolder variable specifies a full path to the output folder. If the output folder does not exist yet, it will be created. % Specify output folder % (MANDATORY) outputFolder = strrep(which(&#39;exampledata/sdat/jobSDAT.m&#39;),&#39;jobSDAT.m&#39;,&#39;derivatives&#39;); In the job files in the example folder of the Osprey repository, the which and strrep functions ensures that an output folder derivatives in the folder where the job file jobSDAT resides. When designing your own job file, you will have to provide the full path to your desired output folder. Note that Osprey detects if the output folder already exists and contains data from a previous analysis. In this case, you will be prompted whether you would like to overwrite the existing output. "],["osprey-gui-tutorial.html", "Chapter 4 Osprey GUI tutorial 4.1 Starting Osprey 4.2 Loading a job file 4.3 Loading the raw MRS data 4.4 Processing the raw data 4.5 Fitting the spectra 4.6 Co-registering to an anatomical image 4.7 Segmentation and tissue fraction calculation 4.8 Quantification 4.9 Overview", " Chapter 4 Osprey GUI tutorial This tutorial describes each step of the Osprey analysis workflow using the graphical user interface. We will learn how to start the GUI, select the job file, load the raw data, process them into spectra, model the processed spectra, co-register the voxel to anatomical images, segment the anatomical images, and derive quantitative metabolite estimates. In this documentation chapter, we will use the jobTwix.m job file in the exampledata/twix/ directory of the Osprey repository. 4.1 Starting Osprey At the MATLAB prompt, enter &gt;&gt; Osprey This will initiate the Osprey GUI application and the underlying processing modules. Once the startup is complete, you will see the Osprey startup menu box: Figure 4.1: The Osprey Startup Menu. 4.2 Loading a job file Click the Load Job file button, navigate to the exampledata/twix directory, and add the file jobTwix.m to the right column: Figure 4.2: Selecting a job file. Click Done. If you have run an Osprey analysis previously with the same output folder specified in the job file, you will be shown a warning: Figure 4.3: Warning when you are about to overwrite a previous analysis. Click Yes. Osprey will now extract all necessary information from the job file you selected by running the OspreyJob module in the background. The next window you see is the main GUI: Figure 4.4: The Osprey GUI after OspreyJob. In the bottom left corner, you see a list of datasets included in the job file definition. All tabs and buttons (except Load Data, Save MRSCont, and Exit) are greyed out at this stage. They will become gradually available as we progress through the analysis workflow. 4.3 Loading the raw MRS data Click the Load data button to initiate the loading process of the raw MRS data. Osprey will now extract the raw FIDs and header data (and perform coil combination, if applicable) by running the OspreyLoad module in the background. For larger files (with separate FIDs for each coil), this process may take a few seconds per dataset. You can monitor the progress through the wait bar. Once the loading process is complete, you can see the coil-combined, but un-aligned and un-averaged data. You can select the dataset you wish to be displayed by clicking on the entry in the dataset list in the bottom left corner, and you can easily scroll through the different datasets using the  and  keys on your keyboard. First dataset Second dataset By clicking the metabolites, reference and water tabs at the bottom of the window, you can display the water-suppressed, lineshape reference, and short-TE water data (if applicable): Metabolite data Lineshape reference data Short-TE water data In the box above the spectrum display, you will find useful information about the sequence, such as TR/TE, number of averages, voxel dimensions, etc. You can export a PDF of the spectrum (along with the information box) by clicking on the Save PDF button in the top right corner of the window. 4.4 Processing the raw data Click the (now available!) Process data button to initiate the post-processing. Osprey will now perform all appropriate processing steps (depending on the available data: eddy-current correction, frequency-and-phase alignment, water removal, frequency referencing, initial phasing) by running the OspreyProcess module in the background. This process may take several seconds per dataset. You can monitor the progress through the wait bar. Once the post-processing is complete, the Processed tab becomes active, showing four different panels: Figure 4.5: The Osprey GUI after OspreyProcess. The top left panel shows the individual averages prior to frequency-and-phase alignment. The bottom left panel shows them after frequency-and-phase alignment. The top right panel shows a scatter plot of the maximum of the 3.02 ppm Cr/PCr signal over the course of the acquisition for both pre- and post-alignment. Finally, the bottom right panel shows the aligned, averaged and referenced spectrum after eddy-current correction and residual water removal. This spectrum will be passed on to the Fit module for modelling. You can go back to inspecting the raw data by clicking the Raw tab at the top of the window. Again, you can display each dataset by selecting it from the dataset list in the bottom left corner, and you can look at the water reference data by clicking on the tabs at the bottom of the window. In the box above the spectrum display, you will find some data quality metrics, such as the signal-to-noise ratio (SNR), linewidth (FWHM), and average frequency drift pre- and post-alignment. You can export a PDF of the four post-processing display panels (along with the information box) by clicking on the Save PDF button in the top right corner of the window. 4.5 Fitting the spectra Click the (now available!) Fit data button to initiate the post-processing. Osprey will now model the processed metabolite and water spectra by running the OspreyFit module in the background. This process may take from a few seconds up to a minute or more per dataset, depending on the complexity of the model. You can monitor the progress through the wait bar. Once the modelling is complete, the Fit tab becomes active: Figure 4.6: The Osprey GUI after OspreyFit. The Fit tab displays the complete fit overlaid on top of the data, along with the smooth cubic B-spline baseline, and the fit residual at the top. Below, the contributions from each basis functions are plotted, with the estimated lineshape convolution, linebroadening and frequency shift parameters applied. For better display, the phase parameters have been applied to the spectrum, so that the basis functions appear without phase. The left panel shows the raw water-scaled metabolite estimates, i.e. the signal amplitudes normalized by the water amplitude. The amplitude parameters will subsequently be used during the quantification process to derive tCr ratios and water-scaled estimates. You can go back to the previous analysis steps by clicking the Raw or Processed tabs at the top of the window. Again, you can display each dataset by selecting it from the dataset list in the bottom left corner, and you can look at the water reference data fits by clicking on the tabs at the bottom of the window. In the box above the spectrum display, you will find fit parameters and information, such as the number of basis functions used, phase estimates, and scaling factors. You can export a PDF of the fit (along with the information box) by clicking on the Save PDF button in the top right corner of the window. 4.6 Co-registering to an anatomical image Click the CoRegister button to initiate the SPM routines for co-registering a voxel to a T1-weighted anatomical image. Osprey will now parse the voxel geometry information and create the voxel mask by running the OspreyCoReg module in the background. This process will take a few seconds per dataset. You can monitor the progress through the wait bar. If you are only interested in the voxel mask, you can skip the Process and Fit steps of the analysis. The CoRegister button becomes available after the Load data analysis step has been completed. Once the co-registration is complete, the Cor/Seg tab becomes active: Figure 4.7: The Osprey GUI after OspreyCoReg. You can see an overlay of the voxel mask on top of the anatomical image in three directions. You can export a PDF of the co-registration display by clicking on the Save PDF button in the top right corner of the window. 4.7 Segmentation and tissue fraction calculation Click the Segment button to initiate the determination of the tissue volume fractions for the co-registered voxel. Osprey will now call the SPM12 segmentation functions and calculate the fractions of grey matter, white matter, and cerebrospinal fluid by running the OspreySeg module in the background. If you have previously segmented the images, this step will only take a few seconds. However, if Osprey has to initiate the segmentation first, it can take up to several minutes per dataset. You can monitor the progress through the wait bar. If you are only interested in the tissue fractions, you can skip the Process and Fit steps of the analysis. The Segment button becomes available after the Load data and CoRegister analysis steps have been completed. Once the segmentation is complete, the Cor/Seg tab features another figure: Figure 4.8: The Osprey GUI after OspreySeg. Below the overlay produced by CoRegister, you can now see four images showing the voxel mask next to the contributions from grey matter, white matter, and CSF, along with the fractional volume estimates for each tissue class. These values will subsequently be used during quantification to account for tissue-specific effects of relaxation, tissue water content, and metabolite content. You can export a PDF of the combined co-registration/segmentation display by clicking on the Save PDF button in the top right corner of the window. 4.8 Quantification Click the Quantify button to have Osprey run the OspreyQuantify module in the background. This should take less than a second per dataset. During this process, several quantitative metabolite estimates are calculated, such as tCr ratios and water-scaled estimates with different degrees of sophistication. Please refer to the Osprey manuscript for details on the implementation of these quantification routines. Once the quantification is complete, the Quantify tab becomes active: Figure 4.9: The Osprey GUI after OspreyQuantify. This tab contains a bare-bone table of the quantitative results for each basis function and each quantification routine for the selected dataset. These numbers are saved in .CSV format tables in the QuantifyResults sub-directory of the output folder. At this stage, all analysis steps have been completed. You can save the current state of the analysis by exporting it the Osprey data container as a .mat file using the Save MRSCont button. You can re-load it at any time using the Load MRSCont file button in the Osprey startup menu (see Step 1 of this tutorial). 4.9 Overview After quantification is complete, another tab becomes active: Overview. This tab contains several visualizations that are interesting for the batched analysis of multiple datasets. By clicking on the tabs at the bottom of the window, you can cycle through the following visualizations: Spectra: Displays all processed spectra (or fits) on top of each other in a single plot. You can select the data or complete fits for the metabolite and water data by using the dropdown menu at the top of the window. Figure 4.10: The Overview Spectra tab in the Osprey GUI. Mean spectra: Displays the mean of spectra (or fits) across all datasets, along with the mean baseline, mean residual, and a ribbon plot representing the standard deviation across all spectra. You can select the metabolite and water data by using the dropdown menu at the top of the window. Figure 4.11: The Overview Mean Spectra tab in the Osprey GUI. Mean spectra: Displays the mean of spectra (or fits) across all datasets, along with the mean baseline, mean residual, and a ribbon plot representing the standard deviation across all spectra. You can select the metabolite and water data by using the dropdown menu at the top of the window. Quantify table: Shows a table with the results of a specific quantification routine for all metabolites and all datasets. You can select the quantification routine to be displayed (tCr ratios, raw water-scaled, CSF-corrected water-scaled, tissue-corrected water-scaled) by using the dropdown menu at the top of the window. Figure 4.12: The Overview Quantify Table tab in the Osprey GUI. Distribution: Shows a raincloud plot of the results of a specific quantification routine for a specific metabolite. The raincloud plot includes a visualization of the distribution, the mean and median values of the distribution, standard deviation, and 25% and 75% percentiles. In addition, each data point is shown. You can select the quantification routine to be displayed (tCr ratios, raw water-scaled, CSF-corrected water-scaled, tissue-corrected water-scaled), as well as the particular metabolite you want to study. By default, the Distribution tab is set to display the tCr ratios of tNAA. Figure 4.13: The Overview Distribution tab in the Osprey GUI. Correlation: Shows a highly customizable 2D scatter plot of a quantitative metabolite estimate against another quantitative metabolite estimate, or a quality metric. Osprey automatically calculates the Pearson correlation coefficient and a p-value (uncorrected for multiple comparisons), and plots the linear regression line with shaded confidence intervals. You can select the quantification routine and metabolite to be correlated, as well as another metabolite or quality metric that it is to be correlated against, by using the dropdown menus at the top of the window. By default, the Correlation tab is set to display the correlation of tNAA/tCr to SNR. Figure 4.14: The Overview Correlation tab in the Osprey GUI. We are incredibly grateful for the fantastic raincloud plot tools developed by Micah Allen, Davide Poggiali, Kirstie Whitaker, Tom Rhys Marshall, and Rogier Kievit. Should you make use of the OspreyOverview raincloud plots, please consider citing their original publications: &gt; * Allen M, Poggiali D, Whitaker K et al. Raincloud plots: a multi-platform tool for robust data &gt; visualization [version 1; peer review: 2 approved]. &gt; Wellcome Open Res 2019, 4:63. DOI: 10.12688/wellcomeopenres.15191.1 &gt; * Allen M, Poggiali D, Whitaker K, Marshall TR, Kievit R. (2018) RainCloudPlots tutorials and codebase (Version v1.1). Zenodo. http://doi.org/10.5281/zenodo.3368186 "],["osprey-basis-set-tools.html", "Chapter 5 Osprey basis set tools 5.1 io_LCMBasis 5.2 fit_makeBasis 5.3 fit_plotBasis", " Chapter 5 Osprey basis set tools Being a linear-combination modelling software, Osprey requires prior spectral knowledge in the form of so-called basis sets. These are collections of model spectra (basis functions) for the various metabolites you wish to quantify. Historically, basis functions were acquired experimentally from aqueous solutions, which was a laborious and often incredibly frustrating task. Fortunately, many free software solutions open up a world of simulating any NMR experiment, and can generate noise-free model spectra of most of the spin systems we could be interested in. In this chapter, you will learn how to generate an Osprey basis set. You can either import an existing complete basis set in LCModel format (.BASIS), or you can compile an Osprey basis set from a set of synthetic spectra that have been simulated using the FID-A software. Please refer to the example scripts in the repository for directions and how to do this. You can also ask for advice in the Spectral Simulation and Basis Sets categories of the MRSHub forum. 5.1 io_LCMBasis If you have an existing LCModel basis set (.BASIS), you can import it into Osprey. Assuming the basis set is located at /Users/Georg/LCModelBasissets/GE/press144, you can execute the following command at the MATLAB prompt after you have run OspreyJob: &gt;&gt; file = &#39;/Users/Georg/LCModelBasissets/GE/press144&#39;; You can then call Osprey’s io_LCMBasis function to create a basis set: &gt;&gt; [BASIS] = io_LCMBasis(file, 1, &#39;unedited&#39;, &#39;none&#39;); Follow the instructions in the MATLAB prompt, and from then on, OspreyFit will automatically pick this basis set, but only if there is no internal existing Osprey basis set with matching parameters. We will soon provide the option to specify an individual basis set in the job file. 5.2 fit_makeBasis For the purpose of this tutorial, we will assume that you have a set of FID-A simulations saved in a folder on your hard drive. Your folder may look like this: Figure 5.1: A folder full of FID-A simulations. In this case, we have simulated a bunch of metabolites for the GE PRESS sequence at an echo time of 144 ms. If this folder is located at, say, /Users/Georg/MRS_Simulations/GE/press144, you can create a variable called folder at the MATLAB prompt: &gt;&gt; folder = &#39;/Users/Georg/MRS_Simulations/GE/press144&#39;; You can then call Osprey’s fit_makeBasis function to create a basis set: &gt;&gt; [BASIS] = fit_makeBasis(folder, 1, &#39;unedited&#39;); This will generate a struct array called BASIS in the MATLAB workspace, and also save it to the current MATLAB working directory. This file is your new Osprey basis set. If the addMMFlag argument (see below) is set to 1, the filename of the basis set is going to be BASIS_MM.mat; if it is set to 0, the filename will be BASIS_noMM.mat. 5.2.1 Complete syntax &gt;&gt; [BASIS] = fit_makeBasis(folder, addMMFlag, sequence, editTarget); Inputs Input Type Description Mandatory? Options folder String Complete path to the folder containing .MAT files with FID-A-simulated metabolite basis functions Yes — addMMFlag Boolean If set to 1 (default), Osprey will automatically add macromolecule and lipid basis functions to the basis set No 1 (default), 0 sequence String Determines the type of sequence that you want to create a basis set for. Will try to automatically determine the order of editing steps from saturated NAA and water signals. No 'unedited' (default), 'MEGA', 'HERMES', 'HERCULES' editTarget String Determines the target molecule(s) of the editing experiment. Only needs to be set if sequence is set to something other than 'unedited'. No 'GABA' (default), 'GSH' Outputs Output Type Description Mandatory? Options BASIS Struct Structure containing the Osprey basis set. Yes — 5.3 fit_plotBasis Once you have generated the basis set, you may want to plot the basis functions and inspect that they look like you expect them to. For this purpose, Osprey includes a function called fit_plotBasis. fit_plotBasis acts on the contents of an Osprey .MAT basis set file. If you load any basis set into MATLAB by double-clicking on it, you will see the struct BASIS in the MATLAB workspace: Figure 5.2: An Osprey basis set after loading into MATLAB. You can then call fit_plotBasis to create a plot overview of the basis set: &gt;&gt; fit_plotBasis(BASIS, 1, 1); This command will generate a stack plot of all basis functions (including macromolecules and lipids, if you have chosen to include them in the basis set) along with a ppm axis: (#fig:ospreyFit_plotBasis)Output from fit_plotBasis. 5.3.1 Complete syntax &gt;&gt; out = fit_plotBasis(basisSet, dim, stagFlag, ppmmin, ppmmax, xlab, ylab, figTitle); Inputs Input Type Description Mandatory? Options basisSet String Name of the struct in the MATLAB workspace containing the Osprey basis set (usually BASIS) Yes — dim Integer Dimension of the basis function that you want to plot. For unedited data, this will be 1. MEGA-edited data will have the off spectrum in dimension 1, the on spectrum in dimension 2, the difference spectrum in dimension 3, and the sum spectrum in dimension 4. No Default: 1 stagFlag Boolean Determines whether basis functions are plotted vertically staggered or simply on top of one another. No 1 = staggered (default), 0 (not staggered) ppmmin Float Lower limit of ppm axis to plot. No Default: 0.2 ppmmax Float Upper limit of ppm axis to plot. No Default: 5.2 xlab String X-axis label No Default: 'Frequency (ppm)' ylab String Y-axis label No Default: '' figTitle String Figure title No Default: '' Outputs Output Type Description Mandatory? Options out Figure handle Figure handle for the output figure Yes — "]]
